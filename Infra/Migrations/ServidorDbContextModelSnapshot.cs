// <auto-generated />
using System;
using Infra.Persistencia.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(ServidorDbContext))]
    partial class ServidorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Entidades.ChatHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConversaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConversaId");

                    b.ToTable("ChatHistorico", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.Conversa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Conversas", (string)null);
                });

            modelBuilder.Entity("Dominio.Entidades.ItemVenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdProduto")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdVenda")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdVenda");

                    b.ToTable("ItensVenda", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1f1a1b1-c1d1-e1f1-a1b1-c1d1e1f1a1b1"),
                            IdProduto = new Guid("c3d3b7a0-9a6a-4b0a-9d0a-0a0a0a0a0a0a"),
                            IdVenda = new Guid("d1e1f1a1-1b1c-1d1e-1f1a-1b1c1d1e1f1a"),
                            PrecoUnitario = 10.00m,
                            Quantidade = 1m
                        },
                        new
                        {
                            Id = new Guid("e2f2a2b2-c2d2-e2f2-a2b2-c2d2e2f2a2b2"),
                            IdProduto = new Guid("c3d3b7a0-9a6a-4b0a-9d0a-0b0b0b0b0b0b"),
                            IdVenda = new Guid("d1e1f1a1-1b1c-1d1e-1f1a-1b1c1d1e1f1a"),
                            PrecoUnitario = 7.50m,
                            Quantidade = 2m
                        },
                        new
                        {
                            Id = new Guid("e3f3a3b3-c3d3-e3f3-a3b3-c3d3e3f3a3b3"),
                            IdProduto = new Guid("c3d3b7a0-9a6a-4b0a-9d0a-0c0c0c0c0c0c"),
                            IdVenda = new Guid("d2e2f2a2-2b2c-2d2e-2f2a-2b2c2d2e2f2a"),
                            PrecoUnitario = 3.00m,
                            Quantidade = 1m
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AtualizadoEmUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CodigoBarras")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CriadoEmUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("EstoqueAtual")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PrecoVenda")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Produtos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3d3b7a0-9a6a-4b0a-9d0a-0a0a0a0a0a0a"),
                            AtualizadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            CodigoBarras = "789456123",
                            CriadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            Descricao = "Coca-Cola 2L",
                            EstoqueAtual = 100m,
                            IsAtivo = true,
                            PrecoVenda = 10.00m
                        },
                        new
                        {
                            Id = new Guid("c3d3b7a0-9a6a-4b0a-9d0a-0b0b0b0b0b0b"),
                            AtualizadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            CodigoBarras = "789123456",
                            CriadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            Descricao = "Fandangos 140g",
                            EstoqueAtual = 50m,
                            IsAtivo = true,
                            PrecoVenda = 7.50m
                        },
                        new
                        {
                            Id = new Guid("c3d3b7a0-9a6a-4b0a-9d0a-0c0c0c0c0c0c"),
                            AtualizadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            CodigoBarras = "789789789",
                            CriadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            Descricao = "Água Mineral 500ml",
                            EstoqueAtual = 200m,
                            IsAtivo = true,
                            PrecoVenda = 3.00m
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.Venda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IdPDV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MomentoDaVendaUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SincronizadoEmUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Vendas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e1f1a1-1b1c-1d1e-1f1a-1b1c1d1e1f1a"),
                            IdPDV = "PDV-01",
                            MomentoDaVendaUTC = new DateTime(2025, 9, 19, 18, 5, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            SincronizadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            ValorTotal = 25.00m
                        },
                        new
                        {
                            Id = new Guid("d2e2f2a2-2b2c-2d2e-2f2a-2b2c2d2e2f2a"),
                            IdPDV = "PDV-01",
                            MomentoDaVendaUTC = new DateTime(2025, 9, 19, 18, 10, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            SincronizadoEmUTC = new DateTime(2025, 9, 19, 18, 15, 54, 705, DateTimeKind.Utc).AddTicks(5941),
                            ValorTotal = 3.00m
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.ChatHistorico", b =>
                {
                    b.HasOne("Dominio.Entidades.Conversa", "Conversa")
                        .WithMany("Mensagens")
                        .HasForeignKey("ConversaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversa");
                });

            modelBuilder.Entity("Dominio.Entidades.ItemVenda", b =>
                {
                    b.HasOne("Dominio.Entidades.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Venda", "Venda")
                        .WithMany("Itens")
                        .HasForeignKey("IdVenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("Dominio.Entidades.Conversa", b =>
                {
                    b.Navigation("Mensagens");
                });

            modelBuilder.Entity("Dominio.Entidades.Venda", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
